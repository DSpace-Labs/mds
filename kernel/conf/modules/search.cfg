#---------------------------------------------------------------#
#--------------SEARCH MODULE CONFIGURATION----------------------#
#---------------------------------------------------------------#
# Configuration properties used by the search system            #
#---------------------------------------------------------------#

### Named Indexes

## The search module may define one or more indexes, each of which is a
## combination of a provider and a 'location' where the index resides.
## Content can be indexed across these, or divided amongst them, as
## configured here. For example, the 'default' index might be Lucene, but
## a few metadata fields could be written to a SOLR server used in a unified
## discovery system. One index is considered the default and is the target of
## queries not specified - all other indexes must be explicitly requested in
## the query. The index definition syntax may contain filter parameter names.
## The name 'index.default' must be used for the default - other indexes may
## have any name starting with 'index.' Examples:
## index.default = org.dspace.search.LuceneIndex|${site.home}/search
## index.discovery = com.atmire.search.SolrIndex|http://localhost:8080/solr/search
## index.embed = org.duraspace.search.EmbeddedSolrIndex|${site.home}/esearch
## for ordinary lucene, a SOLR server, and an embedded SOLR indexing service
## The indexing rules below are interpreted to apply to the default index,
## unless prefixed by the name of the index. See example below

index.default = org.dspace.search.LuceneIndex|${site.home}/search

# test implementation with IndexDen search SaaS
# index.default = org.dspace.search.IndexDenIndex|http://<private token>.api.indexden.com

### Query Configuration

## Following properties govern query construction

# Boolean search operator to use, current supported values are OR and AND
# If this config item is missing or commented out, OR is used
# AND requires all search terms to be present
# OR requires one or more search terms to be present

operator.default = OR

### Analyzers

## The search system may define one or more analyzers for query processing.
## A default analyzer must be given the name 'analyzer.default', and any others
## must begin with 'analyzer."

analyzer.default = org.dspace.search.DSAnalyzer

### Lucene settings

## Settings only for Lucene index - mostly optional
# maxfieldlength = -1
# flush.delay = -1
# batch.documents = 20
# max-clauses = 2048

### Indexing Rules

## These rules represent a (largely) back-end-agnostic set of
## specifications for indexing DSpace content (metadata, bitstreams, etc)
## The rules are interpreted by the indexing system such that the 'longest'
## (most specific) rule matching the content determines how it will be indexed

# Community, Collection, Item, Bundle and Bitstream Metadata
# rule syntax: [index.]type[.bundle][.bitstream].schema.element[.qualifier] = field [,field]*
# where values of 'type' are: 'item', 'community', 'collection', 'bundle', and 'bitstream',
# and where values of 'bundle' are bundle names, 'bitstream' are bitstream names,
# and where 'wildcards' are allowed everywhere. E.g. a very simple rule might be:
# item.dc.* = text
# which would instruct the indexer to put all item dc fields into a common 'text' field
# To exclude metadata, simply list no fields in the value. Thus:
# item.dc.description.provenance =
# would suppress indexing that field. Since only enumerated fields or patterns are
# indexed, it is not necessary to exclude unless part of another pattern.

# this 'legacy' rule set is the default

item.dc.contributor.* = author
item.dc.creator.* = author
item.dc.description.statementofresponsibility = author
item.dc.description.abstract = abstract
item.dc.description.tableofcontents = abstract
item.description.sponsorship = sponsor
item.dc.title.* = title
item.dc.subject.* = keyword
item.dc.identifier.* = identifier
item.dc.language.iso = language
item.dc.relation.ispartofseries = series
item.dc.* = text

# further examples - if we wanted to push item titles to an 
# external SOLR index named 'discovery' we would add
# discovery.item.dc.creator.* = author
# to index bitstream metadata (default index) one could use
# bitstream.ORIGINAL.foo.*.dc.creator = author

# Bitstream files
# the rule syntax: [index.]'file'.bundle.filename = field [,field]* | '@'parser
# where wildcards are allowed anywhere as glob patterns also
# A parser is any class implementing the 'StreamParser' interface that can create
# and index map from an input stream. This would be used when, e.g., a bitstream
# contains specialized metadata, not simply text. Parsers are specified in this
# file using a property with the syntax:
# parser.name = <className>[:initializer]

# this 'legacy' rule is the default

file.TEXT.* = text
