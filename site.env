# Site configuration properties (environment variables) - Notes on usage
# 
# The name/value pairs defined in files of this type must somehow be exposed
# as environment variables to the deployed (runtime) system - they are *not* 
# filtered/interpolated during the build process. The mechanism for exposing them
# varies with the deployment context, but the most common situations will be:
# 1 - Command-line. Copy the env file to the 'bin' subdirectory as 'site.env'
# in the installed system. Then whenever any operation is performed using the
# 'dspace' command-line tool, the environment variables will be loaded automatically.
# 2 - Tomcat. Copy the env file into CATALINA_HOME/bin as 'setenv.sh', and
# the Tomcat runtime will load all the variables automatically.
# 3 - Docker. Simply pass the file as a parameter to docker container management:
# docker run --env-file=./site.env .....
# 4 - Other. Each property can be 'exported' (to use bash shell terminology)
# into to the shell launching the application.
# 
# Use site environment variables to store values which should be kept out of regular source
# control (passwords, API keys, etc) and/or those that are particular to a site, or server
# instance. In this way, all the sensitive/variable details about a deployment can be managed
# in one or more files distinct from the application source control. Note that this means
# you should create a different env file for each deployment context. Maybe one for testing
# ('test.env'), one for production ('prod.env'), one for each server ('server1.env', etc).
# Use descriptive names to help you keep track. Also note that making site configuration changes
# is much simpler: no rebuild or redeploy is required. Simply update the environment file
# and restart the app.
#
# Configuration 'chain-of-command'. The properties contained here can either *override*
# properties contained in mds configuration property files, or be used in configuration
# property value 'interpolation'. These two methods can be combined. Alternatively,
# they may used in scripts or other tools to configure the system. An override example
# would be where a default property needs to be replaced with a site-specific value.
# The kernel.cfg property
# site.name = My DSpace Repository
# is obviously a placeholder/generic value, so one would define an environment variable:
# MDS_SITE_NAME="A Real Institution's Repository"
# An example of interpolation would be the specification of the application's database
# connection parameters:
# db.url = jdbc:postgresql://${DB_PORT_5432_TCP_ADDR}:${DB_PORT_5432_TCP_PORT}/dspace
#
# Syntax rules and tips:
# - use upper case, underscored property (variable) names to conform with environment variable standard practice
# - double quote value strings that contain whitespace or any special characters
# - refrain from whitespace between names and values and the equals sign: causes errors when Docker parses file
# - to override a kernel property named 'x.y', define an environment variable 'MDS_X_Y'
# - to override a property named 'x.y' in module 'z', define an environment variable 'MDS_MOD_Z_X_Y' 
#
# Annotating properties in this file. It's good practice to organize the properties
# into logical groups and add comments about when and how they are used.
# For example, you could create a category 'managed', for properties that may be required
# in some modes of deployment, but not others. In this example, database connection parameters
# may be managed in a hosted deployment by the service provider, but not in a local one.
# So one would omit definition in the former case, but define them in the latter.

## Expected Properties ##

# Site name
MDS_SITE_NAME="MDS at Modern Repo"

## Managed Properties ##

# Base directory of deployment - may be managed by container system
# Uncomment and assign for local deployment
MDS_SITE_HOME=/mds/rt

# DB Connection parameters - leave undefined if deployed in a Docker container
DB_PORT_5432_TCP_ADDR=localhost
DB_PORT_5432_TCP_PORT=5432

# Site administrator
MDS_ADMIN_EMAIL=admin@mysite.edu
MDS_ADMIN_FIRST=Ima
MDS_ADMIN_LAST=Admin
MDS_ADMIN_PASSWORD=admin

## Optional Properties ##

# To use IndexDen SaaS search service, instead of local Lucene/SOLR, define this override
# MDS_MOD_SEARCH_INDEX_DEFAULT="org.dspace.search.IndexDenIndex|http://<user key>.api.indexden.com"
